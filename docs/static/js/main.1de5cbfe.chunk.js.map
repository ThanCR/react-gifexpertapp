{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAOaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAKVC,mBAAS,cALC,mBAKvCC,EALuC,KAK3BC,EAL2B,KAwB9C,OAEI,aADA,CACA,qBACI,sBAAMC,SAdO,SAACC,GAElBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAQd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBS,SAACP,GAEtBF,EAAcE,EAAEQ,OAAOF,e,+BCZlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAeZM,GAfY,4CAAH,sDCFPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OAGI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCNHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECGb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA0BtC,OAnBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,YAQ1B,CAACpB,IAEGqB,EDrBwBM,CAAc3B,GAAjCa,EARyB,EAQ9BN,KAAaa,EARiB,EAQjBA,QAGpB,OACI,qCACI,kCAAKpB,EAAL,OAECoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAEKH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEpBpBiB,EAAe,WAAO,IAAD,EAGM1C,mBAAS,CAAC,cAHhB,mBAGvB2C,EAHuB,KAGX5C,EAHW,KAa9B,OACI,qCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACI4C,EAAWpB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEGA,SAAUA,GADLA,Y,MCrBzB8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1de5cbfe.chunk.js","sourcesContent":["\r\n\r\nimport React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\n                            //recibe el valor de props del componente, en este caso se desestructura en setCategories\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    //bloque de codigo JS para modificar  o alterar los comportamientos de los componentes\r\n\r\n\r\n    const [inputValue, setInputValue] = useState('Hola mundo');\r\n\r\n    const handleInputValue = (e) => {\r\n\r\n        setInputValue(e.target.value);\r\n\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        //////Se retornan los elementos html cambiados mediante el Componente\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputValue}></input>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n","//Clase para mejorar el functional component GifGrid, en los helpers se escriben los metodos o extractos de codigos que se pueden\r\n//hacer externamente para simplificar las clases de los componentes\r\n\r\n\r\nexport const getGifs = async ( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=HkuN1uavqRT6CE8u1BhLA9cE7XBJXM1C`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\n                            //se puede usar props pero para no redundar tanto entonces se simplifica con desestructuracion\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n\r\n    return (\r\n\r\n        \r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(img => setImgs(img));\r\n    // }, [ category ])\r\n                //: sirve para renombrar en la misma clase que estoy codeando, de manera que data=images\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n            <p> {category} </p>\r\n\r\n            {loading && <p>Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {images.map(img => (\r\n                    <GifGridItem\r\n                        key={img.id}//argumentos que le voy a pasar al componene para poder procesarlo (se lo paso en las props)\r\n                        {...img} />\r\n                )\r\n                )}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// siempre que empiece con use se trata de un hook\r\n// que es como una funcion que yo puedo reutilizar de una forma mas facil\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs.js'\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setTimeout(() => {\r\n\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n\r\n                });\r\n\r\n\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state;//{data:[], loading: true };\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    //const categories = ['Primero', 'Segundo', 'Tercero'];\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     setCategories( [...categories, ] );\r\n\r\n    //  };\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>{\r\n                categories.map(category =>\r\n                (<GifGrid\r\n                    key={category}\r\n                    category={category}\r\n                />\r\n                ))\r\n            }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}